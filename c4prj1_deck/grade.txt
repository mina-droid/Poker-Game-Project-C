Grading at Tue Sep 29 23:06:13 UTC 2020
Compiling deck.c -> deck.o
Compiling eval.c -> eval.o
Compiling cards.c -> cards.o
Linking eval.o, deck.o, cards.o, and our tester
Testing free_deck(deck_t *)
- Test passed
Testing add_card_to(deck_t *, card_t)
- Test passed
Testing add_empty_card(deck_t *)
timeout: the monitored command dumped core
Valgrind reported errors:
==1789== Memcheck, a memory error detector
==1789== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1789== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1789== Command: ./tester aec
==1789== Parent PID: 1788
==1789== 
==1789== Invalid read of size 8
==1789==    at 0x401F31: add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==1789==    by 0x403D1E: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==1789==    by 0x400A78: main (in /graderhome/work/c4prj1_deck/tester)
==1789==  Address 0x520b668 is 0 bytes after a block of size 24 alloc'd
==1789==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1789==    by 0x403EBC: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==1789==    by 0x400A78: main (in /graderhome/work/c4prj1_deck/tester)
==1789== 
==1789== Invalid write of size 4
==1789==    at 0x401F37: add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==1789==    by 0x403D1E: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==1789==    by 0x400A78: main (in /graderhome/work/c4prj1_deck/tester)
==1789==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1789== 
==1789== 
==1789== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1789==  Access not within mapped region at address 0x0
==1789==    at 0x401F37: add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==1789==    by 0x403D1E: check_add_empty_card (in /graderhome/work/c4prj1_deck/tester)
==1789==    by 0x400A78: main (in /graderhome/work/c4prj1_deck/tester)
==1789==  If you believe this happened as a result of a stack
==1789==  overflow in your program's main thread (unlikely but
==1789==  possible), you can try to increase the size of the
==1789==  main thread stack using the --main-stacksize= flag.
==1789==  The main thread stack size used in this run was 8388608.
==1789== 
==1789== HEAP SUMMARY:
==1789==     in use at exit: 6,928 bytes in 447 blocks
==1789==   total heap usage: 454 allocs, 7 frees, 7,016 bytes allocated
==1789== 
==1789== LEAK SUMMARY:
==1789==    definitely lost: 0 bytes in 0 blocks
==1789==    indirectly lost: 0 bytes in 0 blocks
==1789==      possibly lost: 0 bytes in 0 blocks
==1789==    still reachable: 6,928 bytes in 447 blocks
==1789==         suppressed: 0 bytes in 0 blocks
==1789== Rerun with --leak-check=full to see details of leaked memory
==1789== 
==1789== For counts of detected and suppressed errors, rerun with: -v
==1789== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing make_deck_exclude(deck_t *)
timeout: the monitored command dumped core
Valgrind reported errors:
==1793== Memcheck, a memory error detector
==1793== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1793== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1793== Command: ./tester mde
==1793== Parent PID: 1792
==1793== 
==1793== Use of uninitialised value of size 8
==1793==    at 0x401FE7: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==1793==    by 0x4039DC: check_make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==1793==    by 0x400A78: main (in /graderhome/work/c4prj1_deck/tester)
==1793== 
==1793== Invalid write of size 8
==1793==    at 0x401FE7: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==1793==    by 0x4039DC: check_make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==1793==    by 0x400A78: main (in /graderhome/work/c4prj1_deck/tester)
==1793==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1793== 
==1793== 
==1793== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1793==  Access not within mapped region at address 0x0
==1793==    at 0x401FE7: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==1793==    by 0x4039DC: check_make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==1793==    by 0x400A78: main (in /graderhome/work/c4prj1_deck/tester)
==1793==  If you believe this happened as a result of a stack
==1793==  overflow in your program's main thread (unlikely but
==1793==  possible), you can try to increase the size of the
==1793==  main thread stack using the --main-stacksize= flag.
==1793==  The main thread stack size used in this run was 8388608.
==1793== 
==1793== HEAP SUMMARY:
==1793==     in use at exit: 1,296 bytes in 57 blocks
==1793==   total heap usage: 57 allocs, 0 frees, 1,296 bytes allocated
==1793== 
==1793== LEAK SUMMARY:
==1793==    definitely lost: 0 bytes in 0 blocks
==1793==    indirectly lost: 0 bytes in 0 blocks
==1793==      possibly lost: 0 bytes in 0 blocks
==1793==    still reachable: 1,296 bytes in 57 blocks
==1793==         suppressed: 0 bytes in 0 blocks
==1793== Rerun with --leak-check=full to see details of leaked memory
==1793== 
==1793== For counts of detected and suppressed errors, rerun with: -v
==1793== Use --track-origins=yes to see where uninitialised values come from
==1793== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing build_remaining_deck(deck_t **, size_t)
Testing with 1 hand
timeout: the monitored command dumped core
Valgrind reported errors:
==1797== Memcheck, a memory error detector
==1797== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1797== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1797== Command: ./tester brd
==1797== Parent PID: 1796
==1797== 
==1797== Use of uninitialised value of size 8
==1797==    at 0x401FE7: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==1797==    by 0x4021E9: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==1797==    by 0x40363C: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==1797==    by 0x400A78: main (in /graderhome/work/c4prj1_deck/tester)
==1797== 
==1797== Invalid write of size 8
==1797==    at 0x401FE7: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==1797==    by 0x4021E9: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==1797==    by 0x40363C: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==1797==    by 0x400A78: main (in /graderhome/work/c4prj1_deck/tester)
==1797==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1797== 
==1797== 
==1797== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1797==  Access not within mapped region at address 0x0
==1797==    at 0x401FE7: make_deck_exclude (in /graderhome/work/c4prj1_deck/tester)
==1797==    by 0x4021E9: build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==1797==    by 0x40363C: check_build_remaining_deck (in /graderhome/work/c4prj1_deck/tester)
==1797==    by 0x400A78: main (in /graderhome/work/c4prj1_deck/tester)
==1797==  If you believe this happened as a result of a stack
==1797==  overflow in your program's main thread (unlikely but
==1797==  possible), you can try to increase the size of the
==1797==  main thread stack using the --main-stacksize= flag.
==1797==  The main thread stack size used in this run was 8388608.
==1797== 
==1797== HEAP SUMMARY:
==1797==     in use at exit: 544 bytes in 13 blocks
==1797==   total heap usage: 15 allocs, 2 frees, 4,648 bytes allocated
==1797== 
==1797== LEAK SUMMARY:
==1797==    definitely lost: 0 bytes in 0 blocks
==1797==    indirectly lost: 0 bytes in 0 blocks
==1797==      possibly lost: 0 bytes in 0 blocks
==1797==    still reachable: 544 bytes in 13 blocks
==1797==         suppressed: 0 bytes in 0 blocks
==1797== Rerun with --leak-check=full to see details of leaked memory
==1797== 
==1797== For counts of detected and suppressed errors, rerun with: -v
==1797== Use --track-origins=yes to see where uninitialised values come from
==1797== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testing get_match_count(deck_t *)
timeout: the monitored command dumped core
Valgrind reported errors:
==1801== Memcheck, a memory error detector
==1801== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1801== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1801== Command: ./tester gmc
==1801== Parent PID: 1800
==1801== 
==1801== Invalid read of size 8
==1801==    at 0x4015AC: get_match_counts (in /graderhome/work/c4prj1_deck/tester)
==1801==    by 0x403249: check_get_match_count (in /graderhome/work/c4prj1_deck/tester)
==1801==    by 0x400A78: main (in /graderhome/work/c4prj1_deck/tester)
==1801==  Address 0x52040e8 is 0 bytes after a block of size 8 alloc'd
==1801==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1801==    by 0x4C2FDEF: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1801==    by 0x4030F6: check_get_match_count (in /graderhome/work/c4prj1_deck/tester)
==1801==    by 0x400A78: main (in /graderhome/work/c4prj1_deck/tester)
==1801== 
==1801== Invalid read of size 4
==1801==    at 0x4015AF: get_match_counts (in /graderhome/work/c4prj1_deck/tester)
==1801==    by 0x403249: check_get_match_count (in /graderhome/work/c4prj1_deck/tester)
==1801==    by 0x400A78: main (in /graderhome/work/c4prj1_deck/tester)
==1801==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1801== 
==1801== 
==1801== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1801==  Access not within mapped region at address 0x0
==1801==    at 0x4015AF: get_match_counts (in /graderhome/work/c4prj1_deck/tester)
==1801==    by 0x403249: check_get_match_count (in /graderhome/work/c4prj1_deck/tester)
==1801==    by 0x400A78: main (in /graderhome/work/c4prj1_deck/tester)
==1801==  If you believe this happened as a result of a stack
==1801==  overflow in your program's main thread (unlikely but
==1801==  possible), you can try to increase the size of the
==1801==  main thread stack using the --main-stacksize= flag.
==1801==  The main thread stack size used in this run was 8388608.
==1801== 
==1801== HEAP SUMMARY:
==1801==     in use at exit: 72 bytes in 8 blocks
==1801==   total heap usage: 8 allocs, 0 frees, 72 bytes allocated
==1801== 
==1801== LEAK SUMMARY:
==1801==    definitely lost: 4 bytes in 1 blocks
==1801==    indirectly lost: 0 bytes in 0 blocks
==1801==      possibly lost: 0 bytes in 0 blocks
==1801==    still reachable: 68 bytes in 7 blocks
==1801==         suppressed: 0 bytes in 0 blocks
==1801== Rerun with --leak-check=full to see details of leaked memory
==1801== 
==1801== For counts of detected and suppressed errors, rerun with: -v
==1801== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
